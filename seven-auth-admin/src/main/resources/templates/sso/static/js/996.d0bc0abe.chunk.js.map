{"version":3,"file":"static/js/996.d0bc0abe.chunk.js","mappings":"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","sources":["config/config.js","typings/SLoginUser.ts","components/UserForm.tsx","components/UserHeader.tsx","pages/user/user-regist/index.tsx"],"sourcesContent":["/** 如果希望配置文件不出现在打包后的静态资源包中，可以使用该配置文件中的信息 */\nconst serverConfig = {\n    /**\n     * 登录模式，local或sso\n     * local模式无appId，且local模式下无需配置ssoUrl\n     */\n    loginMode: \"sso\",\n    // 单点登录（用户认证中心）服务地址\n    ssoUrl: \"http://localhost:8080/auth\",\n    // 客户端（应用系统）服务地址\n    clientUrl: \"http://localhost:8081\",\n    /**\n     * 客户端在服务端的授权应用ID，该ID唯一，一个ID对应一个应用Application\n     * 123456是单独运行前端项目调试用的appId,456321是admin发布后的appId\n     * 其他AppId可在seven-sso-server模块下资源目录下的websites.xml中新增\n     */\n    appId: 123456,\n}\nexport default serverConfig;","import SObejct from \"./SObject\";\nexport class SLoginUser extends SObejct {\n    appId?: number;\n    password: string;\n    constructor(options?: any) {\n        super(options);\n        this.appId = (options && options.appId) || null;\n        this.password = (options && options.password) || \"\";\n    }\n}","\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\";\nimport { Button, Form, Input } from \"antd\";\nimport { FC, ReactElement, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect, Dispatch } from \"dva\";\nimport GeneralUtil from \"@/typings/util/GeneralUtils\";\nimport serverConfig from \"@/config/config\";\nimport { SLoginUser } from \"@/typings/SLoginUser\";\n\ninterface IUserContentProps {\n  /** 表单标题 */\n  title: string;\n  /** 是否是登录（功能）还是注册（功能） */\n  bLogin: boolean;\n  /** 路由history对象，用于登录成功跳转 */\n  history: any;\n  dispatch: Dispatch;\n}\n\n/**\n * 登录和注册共用的表单组件\n */\nconst UserForm: FC<IUserContentProps> = ({\n  bLogin,\n  title,\n  history,\n  dispatch\n}): ReactElement => {\n\n  /** antd4.x 不再使用createForm包裹组件了，这里直接使用钩子函数 */\n  const [form] = Form.useForm();\n\n  /** hooks,函数式组件的state写法，类似于后端的setter */\n  const [nameValidRules, setNameRules] = useState<any>([]);\n  const [passwordValidRules, setPasswordRules] = useState<any>([]);\n  const [rePasswordValidRules, setRePasswordRules] = useState<any>([]);\n\n  /** 副作用钩子函数，类似于类组件中的componentDidMount生命周期函数 */\n  useEffect(() => {\n    if (bLogin) {\n      // 如果登录的话，直接提示用户输入用户名，无需使用正则验证用户名合法性\n      setNameRules([\n        { required: true, message: \"Please input your Username!\" },\n      ]);\n      // 如果登录的话，直接提示用户输入密码，无需使用正则验证用户密码合法性\n      setPasswordRules([\n        { required: true, message: \"Please input your Password!\" },\n      ]);\n    } else {\n      // 如果注册的话，需要验证用户输入的用户名是否符合系统规定\n      setNameRules([\n        {\n          required: true,\n          // 自定义验证用户名校验规则\n          validator: validUserName,\n        },\n      ]);\n\n      // 如果注册的话，需要验证用户输入的密码是否符合系统安全规定\n      setPasswordRules([\n        {\n          required: true,\n          // 自定义验证用户密码校验规则\n          validator: validPassword,\n        },\n      ]);\n\n      // 如果注册的话，验证下用户先后两次输入的密码是否正确\n      setRePasswordRules([\n        {\n          required: true,\n          validator: validRePassword,\n        },\n      ]);\n    }\n  }, [bLogin]);\n\n  /** 表单提交函数，这里通过拿到form的values然后调用后端接口 */\n  const onFinish = () => {\n    /** 这里调用的不一样，login走的是登录，regist走的是注册 */\n    if (bLogin) {\n      form\n        .validateFields()\n        .then((values: any) => {\n          const { search } = history.location\n          let appId = GeneralUtil.getSearchParamValue(search, \"appId\");\n          let user = new SLoginUser(values)\n          if (appId) {\n            user.appId = Number(appId);\n          }\n          /** 调用单点登录系统（用户统一认证中心服务）的用户登录接口 */\n          dispatch({\n            type: \"user/login\",\n            payload: user.toData()\n          })\n        })\n    } else {\n      form\n        .validateFields()\n        .then((values: any) => {\n          /** 调用单点登录系统（用户统一认证中心服务）的用户注册接口 */\n          dispatch({\n            type: \"user/register\",\n            payload: values\n          })\n        })\n        .catch((error: any) => {\n          return Promise.reject(error);\n        });\n    }\n  };\n\n  /**\n   * 验证用户输入的用户名是否符合系统规定\n   * @param rule 验证规则对象\n   * @param value 验证表单值\n   * @returns 异步处理的回调结果\n   */\n  const validUserName = (rule: any, value: string) => {\n    let regExp1 = /^([A-Za-z0-9])+@+([A-Za-z0-9])+.+([A-Za-z]{2,4})$/;\n    let regExp2 = /^[a-zA-Z0-9]{2,20}$/;\n    if (!value) {\n      value = \"\";\n    }\n    if (\n      value.length >= 2 &&\n      value.length <= 20 &&\n      (regExp1.test(value) || regExp2.test(value))\n    ) {\n      /** 新版antd4.x，callback已经废弃，这里请使用promise来替代*/\n      return Promise.resolve();\n    } else {\n      return Promise.reject(\"用户名是2-20位的数字或字母或邮箱！\");\n    }\n  };\n\n  /**\n   * 验证用户输入的密码是否符合安全规定\n   * @param rule 验证规则对象\n   * @param value 验证表单值\n   * @returns 异步处理的回调结果\n   */\n  const validPassword = (rule: any, value: string) => {\n    let regExp = /^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$).{8,20}$/;\n    if (!value) {\n      value = \"\";\n    }\n    if (value.length > 0) {\n      if (regExp.test(value)) {\n        return Promise.resolve();\n      } else {\n        return Promise.reject(\"长度为8-20位的数字字母或特殊字符。\");\n      }\n    } else {\n      return Promise.reject(\"长度为8-20位的数字字母或特殊字符。\");\n    }\n  };\n\n  /**\n   * 验证确认密码\n   * @param rule 验证规则对象\n   * @param value 验证表单值\n   * @returns 异步处理的回调结果\n   */\n  const validRePassword = (rule: any, value: string) => {\n    let regExp = /^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$).{8,20}$/;\n    if (!value) {\n      value = \"\";\n    }\n    if (value.length > 0) {\n      if (regExp.test(value)) {\n        if (value && value !== form.getFieldValue(\"password\")) {\n          return Promise.reject(\"两次密码不一样!\");\n        } else {\n          return Promise.resolve();\n        }\n      } else {\n        return Promise.reject(\"长度为8-20位的数字字母或特殊字符。\");\n      }\n    } else {\n      return Promise.reject(\"长度为8-20位的数字字母或特殊字符。\");\n    }\n  };\n\n  return (\n    <div className=\"user-content\">\n      <div className=\"user-form\">\n        <div className=\"form-title\">{title}</div>\n        <Form\n          form={form}\n          name=\"normal_login\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n        >\n          <Form.Item name=\"name\" rules={nameValidRules}>\n            <Input\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"请输入用户名\"\n            />\n          </Form.Item>\n          <Form.Item name=\"password\" rules={passwordValidRules}>\n            <Input\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\n              type=\"password\"\n              placeholder=\"请输入密码\"\n              autoComplete=\"true\"\n            />\n          </Form.Item>\n          {bLogin ? null : (\n            <Form.Item name=\"rePassword\" rules={rePasswordValidRules}>\n              <Input\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                type=\"password\"\n                placeholder=\"请输入确认密码\"\n                autoComplete=\"true\"\n              />\n            </Form.Item>\n          )}\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              block\n              htmlType=\"submit\"\n              className=\"login-form-button\"\n            >\n              {bLogin ? \"登录\" : \"注册\"}\n            </Button>\n            <div className=\"form-footer\">\n              {bLogin ? (\n                <Link to=\"/regist\">立即注册？</Link>\n              ) : (\n                <Link to={`/login?appId=${serverConfig.appId}`}>立即登录？</Link>\n              )}\n            </div>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default connect()(UserForm);\n","import logo from \"@/assets/images/login-logo.png\";\nconst UserHeader = () => {\n  return (\n    <div className=\"user-header\">\n      <img src={logo} alt=\"logo\" />\n      <span>七仔单点登录</span>\n    </div>\n  )\n}\nexport default UserHeader;","import { FC, ReactElement } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport UserForm from \"@components/UserForm\";\nimport UserHeader from \"@components/UserHeader\";\nimport \"../user.scss\";\n\nconst UserRegist: FC<RouteComponentProps> = ({\n  history\n}): ReactElement => {\n  return (\n    <div className=\"user-login-regist\">\n      <UserHeader />\n      <UserForm title=\"用户注册\" bLogin={false} history={history} />\n    </div>\n  );\n};\n\nexport default UserRegist;\n"],"names":["loginMode","ssoUrl","clientUrl","appId","SLoginUser","options","password","SObejct","connect","bLogin","title","history","dispatch","form","useState","nameValidRules","setNameRules","passwordValidRules","setPasswordRules","rePasswordValidRules","setRePasswordRules","useEffect","required","message","validator","validUserName","validPassword","validRePassword","rule","value","length","test","Promise","resolve","reject","getFieldValue","className","name","initialValues","remember","onFinish","validateFields","then","values","search","location","GeneralUtil","user","Number","type","payload","toData","catch","error","rules","prefix","UserOutlined","placeholder","LockOutlined","autoComplete","block","htmlType","to","serverConfig","src","alt"],"sourceRoot":""}