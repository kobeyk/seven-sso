{"version":3,"file":"static/js/232.c555ba95.chunk.js","mappings":"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","sources":["config/config.js","typings/SLoginUser.ts","components/UserForm.tsx","components/UserHeader.tsx","pages/user/user-login/index.tsx"],"sourcesContent":["/** 如果希望配置文件不出现在打包后的静态资源包中，可以使用该配置文件中的信息 */\r\nconst serverConfig = {\r\n    /**\r\n     * 登录模式，local或sso\r\n     * local模式无appId，且local模式下无需配置ssoUrl\r\n     */\r\n    loginMode: \"sso\",\r\n    // 单点登录（用户认证中心）服务地址\r\n    ssoUrl: \"http://localhost:8080/auth\",\r\n    // 客户端（应用系统）服务地址\r\n    clientUrl: \"http://localhost:8081\",\r\n    /**\r\n     * 客户端在服务端的授权应用ID，该ID唯一，一个ID对应一个应用Application\r\n     * 123456是单独运行前端项目调试用的appId,456321是admin发布后的appId\r\n     * 其他AppId可在seven-sso-server模块下资源目录下的websites.xml中新增\r\n     */\r\n    appId: 123456,\r\n}\r\nexport default serverConfig;","import SObejct from \"./SObject\";\r\nexport class SLoginUser extends SObejct {\r\n    appId?: number;\r\n    password: string;\r\n    constructor(options?: any) {\r\n        super(options);\r\n        this.appId = (options && options.appId) || null;\r\n        this.password = (options && options.password) || \"\";\r\n    }\r\n}","\r\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { FC, ReactElement, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect, Dispatch } from \"dva\";\r\nimport GeneralUtil from \"@/typings/util/GeneralUtils\";\r\nimport serverConfig from \"@/config/config\";\r\nimport { SLoginUser } from \"@/typings/SLoginUser\";\r\n\r\ninterface IUserContentProps {\r\n  /** 表单标题 */\r\n  title: string;\r\n  /** 是否是登录（功能）还是注册（功能） */\r\n  bLogin: boolean;\r\n  /** 路由history对象，用于登录成功跳转 */\r\n  history: any;\r\n  dispatch: Dispatch;\r\n}\r\n\r\n/**\r\n * 登录和注册共用的表单组件\r\n */\r\nconst UserForm: FC<IUserContentProps> = ({\r\n  bLogin,\r\n  title,\r\n  history,\r\n  dispatch\r\n}): ReactElement => {\r\n\r\n  /** antd4.x 不再使用createForm包裹组件了，这里直接使用钩子函数 */\r\n  const [form] = Form.useForm();\r\n\r\n  /** hooks,函数式组件的state写法，类似于后端的setter */\r\n  const [nameValidRules, setNameRules] = useState<any>([]);\r\n  const [passwordValidRules, setPasswordRules] = useState<any>([]);\r\n  const [rePasswordValidRules, setRePasswordRules] = useState<any>([]);\r\n\r\n  /** 副作用钩子函数，类似于类组件中的componentDidMount生命周期函数 */\r\n  useEffect(() => {\r\n    if (bLogin) {\r\n      // 如果登录的话，直接提示用户输入用户名，无需使用正则验证用户名合法性\r\n      setNameRules([\r\n        { required: true, message: \"Please input your Username!\" },\r\n      ]);\r\n      // 如果登录的话，直接提示用户输入密码，无需使用正则验证用户密码合法性\r\n      setPasswordRules([\r\n        { required: true, message: \"Please input your Password!\" },\r\n      ]);\r\n    } else {\r\n      // 如果注册的话，需要验证用户输入的用户名是否符合系统规定\r\n      setNameRules([\r\n        {\r\n          required: true,\r\n          // 自定义验证用户名校验规则\r\n          validator: validUserName,\r\n        },\r\n      ]);\r\n\r\n      // 如果注册的话，需要验证用户输入的密码是否符合系统安全规定\r\n      setPasswordRules([\r\n        {\r\n          required: true,\r\n          // 自定义验证用户密码校验规则\r\n          validator: validPassword,\r\n        },\r\n      ]);\r\n\r\n      // 如果注册的话，验证下用户先后两次输入的密码是否正确\r\n      setRePasswordRules([\r\n        {\r\n          required: true,\r\n          validator: validRePassword,\r\n        },\r\n      ]);\r\n    }\r\n  }, [bLogin]);\r\n\r\n  /** 表单提交函数，这里通过拿到form的values然后调用后端接口 */\r\n  const onFinish = () => {\r\n    /** 这里调用的不一样，login走的是登录，regist走的是注册 */\r\n    if (bLogin) {\r\n      form\r\n        .validateFields()\r\n        .then((values: any) => {\r\n          const { search } = history.location\r\n          let appId = GeneralUtil.getSearchParamValue(search, \"appId\");\r\n          let user = new SLoginUser(values)\r\n          if (appId) {\r\n            user.appId = Number(appId);\r\n          }\r\n          /** 调用单点登录系统（用户统一认证中心服务）的用户登录接口 */\r\n          dispatch({\r\n            type: \"user/login\",\r\n            payload: user.toData()\r\n          })\r\n        })\r\n    } else {\r\n      form\r\n        .validateFields()\r\n        .then((values: any) => {\r\n          /** 调用单点登录系统（用户统一认证中心服务）的用户注册接口 */\r\n          dispatch({\r\n            type: \"user/register\",\r\n            payload: values\r\n          })\r\n        })\r\n        .catch((error: any) => {\r\n          return Promise.reject(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 验证用户输入的用户名是否符合系统规定\r\n   * @param rule 验证规则对象\r\n   * @param value 验证表单值\r\n   * @returns 异步处理的回调结果\r\n   */\r\n  const validUserName = (rule: any, value: string) => {\r\n    let regExp1 = /^([A-Za-z0-9])+@+([A-Za-z0-9])+.+([A-Za-z]{2,4})$/;\r\n    let regExp2 = /^[a-zA-Z0-9]{2,20}$/;\r\n    if (!value) {\r\n      value = \"\";\r\n    }\r\n    if (\r\n      value.length >= 2 &&\r\n      value.length <= 20 &&\r\n      (regExp1.test(value) || regExp2.test(value))\r\n    ) {\r\n      /** 新版antd4.x，callback已经废弃，这里请使用promise来替代*/\r\n      return Promise.resolve();\r\n    } else {\r\n      return Promise.reject(\"用户名是2-20位的数字或字母或邮箱！\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 验证用户输入的密码是否符合安全规定\r\n   * @param rule 验证规则对象\r\n   * @param value 验证表单值\r\n   * @returns 异步处理的回调结果\r\n   */\r\n  const validPassword = (rule: any, value: string) => {\r\n    let regExp = /^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$).{8,20}$/;\r\n    if (!value) {\r\n      value = \"\";\r\n    }\r\n    if (value.length > 0) {\r\n      if (regExp.test(value)) {\r\n        return Promise.resolve();\r\n      } else {\r\n        return Promise.reject(\"长度为8-20位的数字字母或特殊字符。\");\r\n      }\r\n    } else {\r\n      return Promise.reject(\"长度为8-20位的数字字母或特殊字符。\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 验证确认密码\r\n   * @param rule 验证规则对象\r\n   * @param value 验证表单值\r\n   * @returns 异步处理的回调结果\r\n   */\r\n  const validRePassword = (rule: any, value: string) => {\r\n    let regExp = /^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$).{8,20}$/;\r\n    if (!value) {\r\n      value = \"\";\r\n    }\r\n    if (value.length > 0) {\r\n      if (regExp.test(value)) {\r\n        if (value && value !== form.getFieldValue(\"password\")) {\r\n          return Promise.reject(\"两次密码不一样!\");\r\n        } else {\r\n          return Promise.resolve();\r\n        }\r\n      } else {\r\n        return Promise.reject(\"长度为8-20位的数字字母或特殊字符。\");\r\n      }\r\n    } else {\r\n      return Promise.reject(\"长度为8-20位的数字字母或特殊字符。\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-content\">\r\n      <div className=\"user-form\">\r\n        <div className=\"form-title\">{title}</div>\r\n        <Form\r\n          form={form}\r\n          name=\"normal_login\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n        >\r\n          <Form.Item name=\"name\" rules={nameValidRules}>\r\n            <Input\r\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"请输入用户名\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item name=\"password\" rules={passwordValidRules}>\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              type=\"password\"\r\n              placeholder=\"请输入密码\"\r\n              autoComplete=\"true\"\r\n            />\r\n          </Form.Item>\r\n          {bLogin ? null : (\r\n            <Form.Item name=\"rePassword\" rules={rePasswordValidRules}>\r\n              <Input\r\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                type=\"password\"\r\n                placeholder=\"请输入确认密码\"\r\n                autoComplete=\"true\"\r\n              />\r\n            </Form.Item>\r\n          )}\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              block\r\n              htmlType=\"submit\"\r\n              className=\"login-form-button\"\r\n            >\r\n              {bLogin ? \"登录\" : \"注册\"}\r\n            </Button>\r\n            <div className=\"form-footer\">\r\n              {bLogin ? (\r\n                <Link to=\"/regist\">立即注册？</Link>\r\n              ) : (\r\n                <Link to={`/login?appId=${serverConfig.appId}`}>立即登录？</Link>\r\n              )}\r\n            </div>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect()(UserForm);\r\n","import logo from \"@/assets/images/login-logo.png\";\r\nconst UserHeader = () => {\r\n  return (\r\n    <div className=\"user-header\">\r\n      <img src={logo} alt=\"logo\" />\r\n      <span>七仔单点登录</span>\r\n    </div>\r\n  )\r\n}\r\nexport default UserHeader;","import { FC, ReactElement } from 'react';\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport UserForm from \"@components/UserForm\";\r\nimport UserHeader from \"@components/UserHeader\";\r\nimport \"../user.scss\";\r\n\r\n/**\r\n * 用户登录组件\r\n */\r\nconst UserLogin: FC<RouteComponentProps> = ({\r\n  history\r\n}): ReactElement => {\r\n  return (\r\n    <div className=\"user-login-regist\">\r\n      <UserHeader />\r\n      <UserForm title=\"用户登录\" bLogin={true} history={history} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserLogin;\r\n"],"names":["loginMode","ssoUrl","clientUrl","appId","SLoginUser","options","password","SObejct","connect","bLogin","title","history","dispatch","form","useState","nameValidRules","setNameRules","passwordValidRules","setPasswordRules","rePasswordValidRules","setRePasswordRules","useEffect","required","message","validator","validUserName","validPassword","validRePassword","rule","value","length","test","Promise","resolve","reject","getFieldValue","className","name","initialValues","remember","onFinish","validateFields","then","values","search","location","GeneralUtil","user","Number","type","payload","toData","catch","error","rules","prefix","UserOutlined","placeholder","LockOutlined","autoComplete","block","htmlType","to","serverConfig","src","alt"],"sourceRoot":""}